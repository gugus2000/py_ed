.TH PY_ED "1" "June 2021" "py_ed 0.3" "User Commands"
.SH NAME
py_ed \- python clone of ed, a line-oriented text editor
.SH SYNOPSIS
[\fI\, options\/\fR] [\fI\,file\/\fR]
.SH DESCRIPTION
py_ed is a python clone of ed, a line\-oriented text editor. It is used
to create, display, modify and otherwise manipulate text files, both
interactively and via shell scripts. Ed is the \&'standard' text editor
in the sense that it is the originall editor for Unix, and thus widely
available. For most purposes, however, it is superseded by full\-screen
editors such as GNU Emacs, Vim, or GNU Moe.
.SH OPTIONS
.TP
\fB\-h\fR, \fB\-\-help\fR
display this help and exit
.TP
\fB\-V\fR, \fB\-\-version\fR
output version information and exit
.TP
\fB\-E\fR, \fB\-\-extended\-regexp\fR
use extended regular expressions
.TP
\fB\-G\fR, \fB\-\-traditional\fR
run in compatibility mode
.TP
\fB\-l\fR, \fB\-\-loose\-exit\-status\fR
exit with 0 status even if a command fails
.TP
\fB\-p\fR, \fB\-\-prompt\fR=\fI\,STRING\/\fR
use STRING as an interactive prompt
.TP
\fB\-r\fR, \fB\-\-restricted\fR
run in restricted mode
.TP
\fB\-s\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
suppress diagnostics, byte counts and '!' prompt
.TP
\fB\-v\fR, \fB\-\-verbose\fR
be verbose; equivalent to the 'H' command
.PP
Start edit by reading in 'file' if given.
If 'file' begins with a '!', read output of shell command.
.SH DIAGNOSTICS
Exit status: 0 for a normal exit, 1 for environmental problems, (file
not found, invalid flags, I/O errors, etc), 2 to indicate a corrupt or
invalid input file, 3 for an internale consistency error (eg, bug) which
caused ed to panic.
.SH AUTHORS
gugus2000 <gugus2000@phosphore.org>
.SH "SEE ALSO"
.BR ed (1)
